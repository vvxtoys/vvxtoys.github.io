<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[自动生成构造方法、getter、setter]]></title>
    <url>%2F2018%2F07%2F10%2Fauto-getset%2F</url>
    <content type="text"><![CDATA[利用反射自动生成getter、setter、constructor 写个模板类 123456789101112131415161718192021222324package common;public class Templates &#123; public static final String T_CLASS = "package &#123;0&#125;;\n\n&#123;1&#125;public class &#123;2&#125; &#123;\n\n&#123;3&#125;\n\n&#123;5&#125;\n\n&#123;4&#125;\n&#125;"; public static final String T_GET = "\tpublic &#123;0&#125; get&#123;1&#125; () &#123;\n\t\treturn &#123;2&#125;;\n\t&#125;\n"; public static final String T_SET = "\tpublic void set&#123;0&#125;(&#123;1&#125; &#123;2&#125;) &#123;\n\t\tthis.&#123;2&#125;=&#123;2&#125;;\n\t&#125;\n"; public static final String T_ATTR1 = "\tprivate &#123;0&#125; &#123;1&#125;;\n"; public static final String T_ATTR2 = "\t\tthis.&#123;0&#125;=&#123;0&#125;;\n"; public static final String T_IMPORT = "import java.util.Date;\n\n"; public static final String T_CONSTRUCT = "\tpublic &#123;0&#125;(&#123;1&#125;) &#123;\n\t\tsuper();\n&#123;2&#125;\n\t&#125;\n"; public static String format(String pattern, String ... arguments)&#123; String format = pattern; for(int i=0;i&lt;arguments.length;i++)&#123; format = format.replace("&#123;"+i+"&#125;",arguments[i]); &#125; return format; &#125; public static String loadTemplate(String clazz,String pack,String port, String attrs,String get_set,String construct)&#123; return format(T_CLASS, clazz,pack,port,attrs,get_set,construct); &#125;&#125; 创建一个实体类 123456789package cc.vvxtoys.pojo;public class Student &#123; private int id; private String name; private String sex; private String school; &#125; 工具类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115package common;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.List;import org.apache.log4j.Logger;public class Common &#123; private static Logger log = Logger.getLogger(Common.class); //获得绝对路径 public static String absolutePath(String pack, String name, String suffix) &#123; List&lt;String&gt; list = new ArrayList&lt;&gt;(); String absolutePath = ""; try &#123; String packPath = pack.replace(".", "\\"); File src = new File(".\\src"); File file = new File(src.getCanonicalPath()); File[] fs = file.listFiles(); for (int i = 0; i &lt; fs.length; i++) &#123; if (fs[i].isDirectory()) &#123; if (fs[i].getAbsolutePath().endsWith(packPath)) &#123; absolutePath = fs[i].getAbsolutePath() + "\\" + name + suffix; return absolutePath; &#125; list.add(fs[i].getAbsolutePath()); &#125; &#125; for (int j = 0; j &lt; Integer.MAX_VALUE; j++) &#123; if (j&gt;0&amp;&amp;j == list.size() - 1) &#123; break; &#125; File tmp = new File(list.get(j)); fs = tmp.listFiles(); for (int k = 0; k &lt; fs.length; k++) &#123; if (fs[k].isDirectory()) &#123; if (fs[k].getAbsolutePath().endsWith(packPath)) &#123; absolutePath = fs[k].getAbsolutePath() + "\\" + name + suffix; return absolutePath; &#125; list.add(fs[k].getAbsolutePath()); &#125; &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return absolutePath; &#125; public static String loadFile(String path) &#123; File file = new File(path); String str = null; BufferedReader reader = null; StringBuffer buffer = new StringBuffer(); String charset = "utf-8"; try &#123; InputStreamReader is = new InputStreamReader(new FileInputStream(file), charset); reader = new BufferedReader(is); while ((str = reader.readLine()) != null) &#123; buffer.append(str); buffer.append("\n"); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (reader != null) &#123; try &#123; reader.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125; return buffer.toString(); &#125; public static void writeFile(String filePath, String str, boolean flg) &#123; try &#123; FileWriter fw = new FileWriter(new File(filePath), flg); PrintWriter pw = new PrintWriter(fw); pw.println(str); log.info("写入成功。。。"); pw.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; public static void writeFile(String filePath, String str) &#123; try &#123; FileWriter fw = new FileWriter(new File(filePath), true); PrintWriter pw = new PrintWriter(fw); pw.println(str); log.info("写入成功。。。"); pw.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; //首字母大写 public static String upInitials(String str)&#123; StringBuffer buff = new StringBuffer(); buff.append(String.valueOf(str.charAt(0)).toUpperCase()); buff.append(str.toCharArray(),1,str.length()-1); return buff.toString(); &#125;&#125; 构建类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283package auto_get_set;import java.lang.reflect.Field;import common.Common;import common.Templates;/** * @author vvxtoys */public class ClassGenerator &#123; private String [] attrs; private String [] types; private String absolutePath; private String context; private String clazz; public ClassGenerator(Object obj) &#123; loadClass(obj); &#125; public void loadClass(Object obj)&#123; Field [] fs = null; try&#123; String claname = obj.getClass().getSimpleName(); String suffix = ".java"; String pack = obj.getClass().getPackage().getName(); absolutePath = Common.absolutePath(pack, claname, suffix); context = Common.loadFile(absolutePath); clazz = claname; Class clazz = Class.forName(obj.getClass().getName()); fs = clazz.getDeclaredFields(); attrs = new String[fs.length]; types = new String[fs.length]; for(int i=0;i&lt;fs.length;i++)&#123; attrs[i] = fs[i].getName(); types[i] = fs[i].getType().getSimpleName(); &#125; &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; &#125; public void autoGetSet()&#123; String str = context.substring(0,context.lastIndexOf("&#125;")); String get_set = ""; for(int i=0;i&lt;attrs.length;i++)&#123; String g1 = Templates.format(Templates.T_GET, types[i],Common.upInitials(attrs[i]),attrs[i]); String s1 = Templates.format(Templates.T_SET, Common.upInitials(attrs[i]),types[i],attrs[i]); get_set+=g1+s1; &#125; str+=get_set; str+="&#125;"; context = str; &#125; public void autoConstruct()&#123; String str = context.substring(0,context.lastIndexOf("&#125;")); String c1 = Templates.format(Templates.T_CONSTRUCT, clazz,"",""); String params = ""; String field = ""; for(int i=0;i&lt;attrs.length;i++)&#123; params+=types[i]+" "+attrs[i]+","; field+=Templates.format(Templates.T_ATTR2, attrs[i]); &#125; params = params.substring(0,params.length()-1); String c2 = Templates.format(Templates.T_CONSTRUCT, clazz,params,field); str +=c1+c2; str+="&#125;"; context = str; &#125; public void updateClass()&#123; Common.writeFile(absolutePath, context,false); &#125; public void run()&#123; autoConstruct(); autoGetSet(); updateClass(); &#125;&#125; 测试 123456789101112package auto_get_set;import cc.vvxtoys.pojo.Student;public class Test &#123; public static void main(String[] args) &#123; ClassGenerator g = new ClassGenerator(new Student()); g.run(); &#125;&#125; 构建之后的实体类 123456789101112131415161718192021222324252627282930313233343536373839404142434445package cc.vvxtoys.pojo;public class Student &#123; private int id; private String name; private String sex; private String school; public Student() &#123; super(); &#125; public Student(int id,String name,String sex,String school) &#123; super(); this.id=id; this.name=name; this.sex=sex; this.school=school; &#125; public int getId () &#123; return id; &#125; public void setId(int id) &#123; this.id=id; &#125; public String getName () &#123; return name; &#125; public void setName(String name) &#123; this.name=name; &#125; public String getSex () &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex=sex; &#125; public String getSchool () &#123; return school; &#125; public void setSchool(String school) &#123; this.school=school; &#125;&#125; 结束 写写停停大概也是花费了两天的时间，东西虽然很小，也还有bug，但是还是有点成就感的。工作也一年了，博客就写了几篇，以后要加油了，记录一些有趣的东西。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>generator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[poi笔记(导入demo)]]></title>
    <url>%2F2018%2F07%2F10%2Fpoi-simpleDemo%2F</url>
    <content type="text"><![CDATA[一个简单的导入demo excel文件 实体类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package cc.vvxtoys.poi;public class Student &#123; private String id; private String stcode; private String stname; private String sex; private String phone; private String school; private String address; private String birthday; public String getBirthday() &#123; return birthday; &#125; public void setBirthday(String birthday) &#123; this.birthday = birthday; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getStcode() &#123; return stcode; &#125; public void setStcode(String stcode) &#123; this.stcode = stcode; &#125; public String getStname() &#123; return stname; &#125; public void setStname(String stname) &#123; this.stname = stname; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public String getPhone() &#123; return phone; &#125; public void setPhone(String phone) &#123; this.phone = phone; &#125; public String getSchool() &#123; return school; &#125; public void setSchool(String school) &#123; this.school = school; &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address; &#125; public Student(String id, String stcode, String stname, String sex, String phone, String school, String address) &#123; super(); this.id = id; this.stcode = stcode; this.stname = stname; this.sex = sex; this.phone = phone; this.school = school; this.address = address; &#125; public Student() &#123; super(); &#125; &#125; servicepackage cc.vvxtoys.poi;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.InputStream;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import cc.vvxtoys.util.CommonTools;public class ExcelService &#123; private static ImportExcelUtils utils = new ImportExcelUtils(); public static Object getExcelParser(String path, String sheet, String start, String end) throws Exception &#123; InputStream is = null; if (utils.isEmpty(path)) &#123; return new FileNotFoundException("file not found"); &#125; else &#123; is = new FileInputStream(path); &#125; if (path.endsWith(ImportExcelUtils.EXCEL_2003)) &#123; HSSFWorkbook workbook = new HSSFWorkbook(is); return importXls(start, end, workbook, sheet); &#125; else if (path.endsWith(ImportExcelUtils.EXCEL_2007)) &#123; XSSFWorkbook workbook = new XSSFWorkbook(is); return importXlsx(start, end, workbook, sheet); &#125; else &#123; is.close(); return new Exception("type error"); &#125; &#125; public static Map&lt;String, Object&gt; importXls(String start, String end, HSSFWorkbook workbook, String sheet) &#123; Map&lt;String, Object&gt; result = new HashMap&lt;String, Object&gt;(); List&lt;Student&gt; sList = new ArrayList&lt;&gt;(); HSSFSheet hssfSheet = null; // 如果传过来sheet页的名称,取当前sheet页,否则遍历所有sheet if (!utils.isEmpty(sheet)) &#123; hssfSheet = workbook.getSheet(sheet); &#125; else &#123; for (int i = 0; i &lt; workbook.getNumberOfSheets(); i++) &#123; hssfSheet = workbook.getSheetAt(i); int maxIndex = hssfSheet.getLastRowNum();// 获取最大下标 int startIndex = 0; int endIndex = 0; if (utils.isEmpty(start)) &#123; start = String.valueOf(0); &#125; if (utils.isEmpty(end)) &#123; end = maxIndex + String.valueOf(1); &#125; if (Integer.parseInt(start) &lt;= 1) &#123; startIndex = 1; &#125; else &#123; startIndex = Integer.parseInt(start) - 1; &#125; if (Integer.parseInt(end) &gt; maxIndex) &#123; endIndex = maxIndex + 1; &#125; else &#123; endIndex = Integer.parseInt(end); &#125; for (int j = startIndex; j &lt; endIndex; j++) &#123; Student student = new Student(); HSSFRow row = hssfSheet.getRow(j); if (utils.isBlank(row)) &#123; break; &#125; HSSFCell c1 = row.getCell(0); HSSFCell c2 = row.getCell(1); HSSFCell c3 = row.getCell(2); HSSFCell c4 = row.getCell(3); HSSFCell c5 = row.getCell(4); HSSFCell c6 = row.getCell(5); HSSFCell c7 = row.getCell(6); student.setId(CommonTools.get32UUID());//uuid if(!utils.isEmpty(c1))&#123; String stcode = utils.getValue(c1); student.setStcode(stcode); &#125; if(!utils.isEmpty(c2))&#123; String stname = utils.getValue(c2); student.setStname(stname); &#125; if(!utils.isEmpty(c3))&#123; String sex = utils.getValue(c3); student.setSex(sex); &#125; if(!utils.isEmpty(c4))&#123; String phone = utils.getValue(c4); student.setPhone(phone); &#125; if(!utils.isEmpty(c5))&#123; String birthday = utils.getValue(c5).replaceAll("/", "-"); student.setBirthday(birthday); &#125; if(!utils.isEmpty(c6))&#123; String school = utils.getValue(c6); student.setSchool(school); &#125; if(!utils.isEmpty(c7))&#123; String address = utils.getValue(c7); student.setAddress(address); &#125; sList.add(student); &#125; &#125; &#125; result.put("sList", sList); return result; &#125; public static Map&lt;String, Object&gt; importXlsx(String start, String end, XSSFWorkbook workbook, String sheet) &#123; Map&lt;String, Object&gt; result = new HashMap&lt;String, Object&gt;(); List&lt;Student&gt; sList = new ArrayList&lt;&gt;(); XSSFSheet xssfSheet = null; // 如果传过来sheet页的名称,取当前sheet页,否则遍历所有sheet if (!utils.isEmpty(sheet)) &#123; xssfSheet = workbook.getSheet(sheet); &#125; else &#123; for (int i = 0; i &lt; workbook.getNumberOfSheets(); i++) &#123; xssfSheet = workbook.getSheetAt(i); int maxIndex = xssfSheet.getLastRowNum();// 获取最大下标 int startIndex = 0; int endIndex = 0; if (utils.isEmpty(start)) &#123; start = String.valueOf(0); &#125; if (utils.isEmpty(end)) &#123; end = maxIndex + String.valueOf(1); &#125; if (Integer.parseInt(start) &lt;= 1) &#123; startIndex = 1; &#125; else &#123; startIndex = Integer.parseInt(start) - 1; &#125; if (Integer.parseInt(end) &gt; maxIndex) &#123; endIndex = maxIndex + 1; &#125; else &#123; endIndex = Integer.parseInt(end); &#125; for (int j = startIndex; j &lt; endIndex; j++) &#123; Student student = new Student(); XSSFRow row = xssfSheet.getRow(j); XSSFCell c1 = row.getCell(0); XSSFCell c2 = row.getCell(1); XSSFCell c3 = row.getCell(2); XSSFCell c4 = row.getCell(3); XSSFCell c5 = row.getCell(4); XSSFCell c6 = row.getCell(5); XSSFCell c7 = row.getCell(6); student.setId(CommonTools.get32UUID());//uuid if(!utils.isEmpty(c1))&#123; String stcode = utils.getValue(c1); student.setStcode(stcode); &#125; if(!utils.isEmpty(c2))&#123; String stname = utils.getValue(c2); student.setStname(stname); &#125; if(!utils.isEmpty(c3))&#123; String sex = utils.getValue(c3); student.setSex(sex); &#125; if(!utils.isEmpty(c4))&#123; String phone = utils.getValue(c4); student.setPhone(phone); &#125; if(!utils.isEmpty(c5))&#123; String birthday = utils.getValue(c5).replaceAll("/", "-"); student.setBirthday(birthday); &#125; if(!utils.isEmpty(c6))&#123; String school = utils.getValue(c6); student.setSchool(school); &#125; if(!utils.isEmpty(c7))&#123; String address = utils.getValue(c7); student.setAddress(address); &#125; sList.add(student); &#125; &#125; &#125; result.put("sList", sList); return result; &#125; public static void main(String[] args) throws Exception &#123; String path = "D:\\Desktop\\2.xlsx"; //文件路径 String start = "0"; //开始条数 String end = "10";//结束条数 String sheet = null;//sheet页名称 ExcelService service = new ExcelService(); Map&lt;String, Object&gt; result = (Map&lt;String, Object&gt;) service.getExcelParser(path, sheet, start, end); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>poi</tag>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java工具类(poi导入)]]></title>
    <url>%2F2018%2F07%2F10%2FPoiExcel-import%2F</url>
    <content type="text"><![CDATA[poi导入工具类 maven依赖 123456&lt;!-- POI --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt; &lt;version&gt;3.9&lt;/version&gt;&lt;/dependency&gt; 导入工具类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package cc.vvxtoys.poi;import java.math.BigDecimal;import java.text.SimpleDateFormat;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFDateUtil;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.xssf.usermodel.XSSFCell;public class ImportExcelUtils &#123; public static final String EXCEL_2003 = &quot;.xls&quot;; public static final String EXCEL_2007 = &quot;.xlsx&quot;; @SuppressWarnings(&quot;static-access&quot;) public String getValue(XSSFCell cell) &#123; if (cell.getCellType() == cell.CELL_TYPE_BOOLEAN) &#123; return String.valueOf(cell.getBooleanCellValue()).trim(); &#125; else if (cell.getCellType() == cell.CELL_TYPE_NUMERIC) &#123; if (HSSFDateUtil.isCellDateFormatted(cell)) &#123; SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); return String.valueOf(sdf.format(HSSFDateUtil.getJavaDate(cell.getNumericCellValue()))).trim(); &#125; BigDecimal bd = new BigDecimal(String.valueOf(cell.getNumericCellValue()).trim()); return bd.toPlainString(); &#125; else &#123; return String.valueOf(cell.getStringCellValue()).trim(); &#125; &#125; @SuppressWarnings(&quot;static-access&quot;) public String getValue(HSSFCell cell) &#123; if (cell.getCellType() == cell.CELL_TYPE_BOOLEAN) &#123; return String.valueOf(cell.getBooleanCellValue()).trim(); &#125; else if (cell.getCellType() == cell.CELL_TYPE_NUMERIC) &#123; if (HSSFDateUtil.isCellDateFormatted(cell)) &#123; SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); return String.valueOf(sdf.format(HSSFDateUtil.getJavaDate(cell.getNumericCellValue()))).trim(); &#125; BigDecimal bd = new BigDecimal(String.valueOf(cell.getNumericCellValue()).trim()); return bd.toPlainString(); &#125; else &#123; return String.valueOf(cell.getStringCellValue()).trim(); &#125; &#125; //判断空行 public boolean isBlank(Row row)&#123; for(int i=0;i&lt;row.getLastCellNum();i++)&#123; Cell cell = row.getCell(i); if(cell!=null&amp;&amp;cell.getCellType()!=cell.CELL_TYPE_BLANK)&#123; return false; &#125; &#125; return true; &#125; //非空判断 public boolean isEmpty(Object obj)&#123; if (obj instanceof HSSFCell) &#123; HSSFCell cell = (HSSFCell) obj; return getValue(cell) == null || &quot;&quot;.equals(getValue(cell)); &#125; if (obj instanceof XSSFCell) &#123; XSSFCell cell = (XSSFCell) obj; return getValue(cell) == null || &quot;&quot;.equals(getValue(cell)); &#125; return obj == null || obj.toString().trim().equals(&quot;&quot;); &#125; &#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>utils</tag>
        <tag>poi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java工具类(日期处理)]]></title>
    <url>%2F2018%2F07%2F10%2FDateUtil%2F</url>
    <content type="text"><![CDATA[最近总是接触时间处理问题，花了点时间整理以前使用过的方法，修改整合，记录下来方便以后使用。package cc.vvxtoys.util;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;/** * * @author vvxtoys * @date 2018年1月6日下午9:48:02 * */public class DateUtils &#123; private static Calendar cal = Calendar.getInstance(); private static String fm = &quot;&quot;;//format month private static String fd = &quot;&quot;;//format day /** * @description 判断是否为闰年 */ public static boolean isLeapYear(int year)&#123; return (year % 400 == 0) || (year % 4 == 0 &amp;&amp; year % 100 != 0); &#125; /** * * @description 获取月天数 */ public static String getMonthDays(int year,int month)&#123; String [] days = &#123;&quot;31&quot;, null, &quot;31&quot;, &quot;30&quot;, &quot;31&quot;, &quot;30&quot;, &quot;31&quot;, &quot;31&quot;, &quot;30&quot;, &quot;31&quot;, &quot;30&quot;, &quot;31&quot;&#125;; if(isLeapYear(year))&#123; days[1]=&quot;29&quot;; &#125;else&#123; days[1]=&quot;28&quot;; &#125; return days[month-1]; &#125; /** * @description 获取时间在当前年为第几周 */ public static int getWeekOfYear(String date) throws ParseException &#123; SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); cal.setFirstDayOfWeek(Calendar.MONDAY); String firstDay = date.substring(0, 4) + &quot;-01-01&quot;; cal.setTime(sdf.parse(firstDay)); int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK); if (dayOfWeek == 2) &#123; cal.setTime(sdf.parse(date)); int num = cal.get(Calendar.WEEK_OF_YEAR); return num; &#125; else &#123; cal.setTime(sdf.parse(date)); int num = cal.get(Calendar.WEEK_OF_YEAR) - 1; return num; &#125; &#125; /** * * @description 天计算 */ public static String addDays(String date,int num)&#123; try&#123; cal.setTime(toDate(date)); cal.add(Calendar.DATE, num); toFormatDate(); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; return cal.get(Calendar.YEAR) + &quot;-&quot;+fm+&quot;-&quot;+fd; &#125; /** * * @description 星期 */ public static String addWeeks(String date,int num)&#123; try &#123; cal.setTime(toDate(date)); cal.add(Calendar.WEEK_OF_YEAR, num); toFormatDate(); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; return cal.get(Calendar.YEAR) + &quot;-&quot;+fm+&quot;-&quot;+fd; &#125; /** * * @description 月 */ public static String addMonths(String date,int num)&#123; try &#123; cal.setTime(toDate(date)); cal.add(Calendar.MONTH, num); toFormatDate(); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; return cal.get(Calendar.YEAR) + &quot;-&quot;+fm+&quot;-&quot;+fd; &#125; /** * * @description 季度 */ public static String addQuarters(String date,int num)&#123; try &#123; cal.setTime(toDate(date)); cal.add(Calendar.MONTH, num*3); toFormatDate(); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; return cal.get(Calendar.YEAR) + &quot;-&quot;+fm+&quot;-&quot;+fd; &#125; /** * * @description 年 */ public static String addYears(String date,int num)&#123; try &#123; cal.setTime(toDate(date)); cal.add(Calendar.YEAR, num); toFormatDate(); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; return cal.get(Calendar.YEAR) + &quot;-&quot;+fm+&quot;-&quot;+fd; &#125; /** * * @description 日期转换 */ public static Object translateDate(Object time, String pattern) &#123; Object date = new Object(); if (isEmpty(pattern)) &#123; pattern = &quot;yyyy-MM-dd&quot;; &#125; if (isEmpty(time)) &#123; time = &quot;1970-1-1&quot;; &#125; SimpleDateFormat sdf = new SimpleDateFormat(pattern); try &#123; if (time instanceof String) &#123; date = sdf.parse((String) time); &#125; else if (time instanceof Date) &#123; date = sdf.format(time); &#125; else &#123; throw new Exception(&quot;转换失败&quot;); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return date; &#125; /** * * @description 当前日期为本周第几天 */ public static int getDayOfWeek(String date)&#123; try&#123; cal.setTime(toDate(date)); cal.setFirstDayOfWeek(Calendar.MONDAY); &#125;catch(ParseException e)&#123; e.printStackTrace(); &#125; return cal.get(Calendar.DAY_OF_WEEK)==1?7:cal.get(Calendar.DAY_OF_WEEK)-1; &#125; /** * * @description 周一 */ public static String getStartDayOfThisWeek(String date)&#123; return addDays(date, -(getDayOfWeek(date)-1)); &#125; /** * * @description 周日 */ public static String getEndDayOfThisWeek(String date)&#123; return addDays(date,(7-getDayOfWeek(date))); &#125; //获取当前时间 public static String getCurrentDate()&#123; Date date = new Date(); SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); return sdf.format(date); &#125; //当前时间 public static String getCurrentDate(String pattern)&#123; Date date = new Date(); if(isEmpty(pattern))&#123; pattern = &quot;yyyy-MM-dd&quot;; &#125; SimpleDateFormat sdf = new SimpleDateFormat(pattern); return sdf.format(date); &#125; /** * * @description 时间间隔 月 季度 年 *3 *12 */ public static int getSubDays(int num)&#123; Date date = new Date(); cal.setTime(date); cal.add(Calendar.MONTH, num); long time = cal.getTimeInMillis() - date.getTime(); return (int) (time / (1000 * 60 * 60 * 24)); &#125; /** * * @description 获取第几周开始时间 */ public static String getStartDayOfWeek(int year,int num)&#123; cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); cal.set(Calendar.YEAR, year); cal.set(Calendar.WEEK_OF_YEAR, num); toFormatDate(); return cal.get(Calendar.YEAR) + &quot;-&quot;+fm+&quot;-&quot;+fd; &#125; /** * * @description 获取第几周结束时间 */ public static String getEndDayOfWeek(int year,int num)&#123; cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); cal.set(Calendar.YEAR, year); cal.set(Calendar.WEEK_OF_YEAR, num); cal.add(Calendar.DAY_OF_WEEK, 6); toFormatDate(); return cal.get(Calendar.YEAR) + &quot;-&quot;+fm+&quot;-&quot;+fd; &#125; /** * * @description 获取第几月开始时间 */ public static String getStartDayOfMonth(int year,int num)&#123; String month = num &lt; 10 ? &quot;0&quot; + num : String.valueOf(num); return year + &quot;-&quot; + month + &quot;-&quot; + &quot;01&quot;; &#125; /** * * @description 获取第几月结束时间 */ public static String getEndDayOfMonth(int year,int num)&#123; cal.set(Calendar.YEAR, year); cal.set(Calendar.MONTH, num - 1); cal.set(Calendar.DATE, 1); cal.add(Calendar.MONTH, 1); cal.add(Calendar.DAY_OF_YEAR, -1); toFormatDate(); return cal.get(Calendar.YEAR) + &quot;-&quot;+fm+&quot;-&quot;+fd; &#125; //获取第几季度开始时间 public static String getStartDayOfQuarter(int year,int num)&#123; num = 3 * num - 2; String month = num &lt; 10 ? &quot;0&quot; + num : String.valueOf(num); return year + &quot;-&quot; + month + &quot;-&quot; + &quot;01&quot;; &#125; //获取第几季度结束时间 public static String getEndDayOfQuarter(int year,int num)&#123; cal.set(Calendar.YEAR, year); cal.set(Calendar.MONTH, 3 * num - 1); cal.set(Calendar.DATE, 1); cal.add(Calendar.MONTH, 1); cal.add(Calendar.DAY_OF_YEAR, -1); toFormatDate(); return cal.get(Calendar.YEAR) + &quot;-&quot;+fm+&quot;-&quot;+fd; &#125; //时间间隔 public static int intervalDay(String d1,String d2)&#123; int num = 0; try&#123; long second = toDate(d2).getTime()-toDate(d1).getTime(); num=(int)(Math.abs(second)/(1000 * 60 * 60 * 24)); &#125;catch(ParseException e)&#123; e.printStackTrace(); &#125; return num; &#125; private static void toFormatDate()&#123; int month = (cal.get(Calendar.MONTH) + 1); fm = month&lt;10?&quot;0&quot;+month:String.valueOf(month); int day = cal.get(Calendar.DAY_OF_MONTH); fd = day&lt;10?&quot;0&quot;+day:String.valueOf(day); &#125; private static Date toDate(String date) throws ParseException&#123; SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); return sdf.parse(date); &#125; private static boolean isEmpty(Object obj)&#123; return obj==null||obj.toString().trim().equals(&quot;&quot;); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>utils</tag>
      </tags>
  </entry>
</search>